
public class AddEvent extends Application {

	/* fields */
	Connection con = null;
	PreparedStatement pre = null;
	ResultSet result = null;
	TextField name;
	TextArea textArea;
	TextArea description;

	TableView<CreatEvent> table;
	ObservableList<CreatEvent> data;

	private FileChooser filechooser;
	private Button brows;
	private File file;
	// private Desktop deskt = Desktop.getDesktop();

	private ImageView imv;
	private Image im;
	private FileInputStream fil;

	/* main method */
	public static void main(String[] args) {

		launch(args);
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	@Override
	public void start(Stage primaryStage) throws Exception {
		primaryStage.setTitle("Add Event ");

		/* method to for checking connection to the database */
		CheckConection();

		name = new TextField();
		name.setFont(new Font(20));
		name.setPromptText("Enter Name");
		name.setMaxWidth(300);

		description = new TextArea();

		description.setPromptText("Description");
		description.setFont(new Font(30));
		description.setPrefSize(200, 20);
		// des.setEditable(false);
		description.setMaxWidth(300);
		textArea = new TextArea();

		textArea.setPromptText("File Path");
		textArea.setFont(new Font(10));
		textArea.setPrefSize(100, 10);
		textArea.setEditable(false);
		textArea.setMaxWidth(300);

		Button savbut = new Button("Add");
		savbut.setFont(new Font(30));
		savbut.setOnAction(e -> {

			/*
			 * SaveEvent is a name of a record in the database so inset and save
			 * values in to the database
			 */

			String query = "INSERT INTO SaveEvent (Name,Description,Image) VALUES (?,?,?)";
			try {
				pre = con.prepareStatement(query);
				pre.setString(1, name.getText());
				pre.setString(2, description.getText());

				fil = new FileInputStream(file);
				pre.setBinaryStream(3, (InputStream) fil, (int) file.length());

				Alert alet = new Alert(AlertType.INFORMATION);
				alet.setTitle("infor dialog");
				alet.setHeaderText(null);
				alet.setContentText("event created");
				alet.showAndWait();
				pre.execute();

				pre.close();
				ClearFields();
				refresTable();
			} catch (SQLException e1) {
				// label.setText("SQL error");
			} catch (FileNotFoundException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}

		});

		/*
		 * for now just text files and Image files can be uploaded with the
		 * filechooser and save in the database
		 */
		filechooser = new FileChooser();
		filechooser.getExtensionFilters().addAll(new ExtensionFilter("Text Files", "*text"),
				new ExtensionFilter("Image Files ", "*.png", "*.jpg"), new ExtensionFilter("All Files", "*.*"));

		brows = new Button("upload");
		brows.setFont(new Font(20));
		brows.setOnAction(e -> {

			file = filechooser.showOpenDialog(primaryStage);
			if (file != null) {

				// deskt.open(file);
				textArea.setText(file.getAbsolutePath());

				im = new Image(file.toURI().toString(), 100, 150, true, true);

				imv = new ImageView(im);
				imv.setFitHeight(1050);
				imv.setFitWidth(100);
				imv.setPreserveRatio(true);

				BorderPane.setAlignment(imv, Pos.TOP_LEFT);

			}
		});

		/*
		 * table consist of columns in the database where the name, description
		 * and file are stored
		 */
		table = new TableView<>();
		data = FXCollections.observableArrayList();

		TableColumn col1 = new TableColumn<>("Name");
		col1.setMaxWidth(100);
		col1.setCellValueFactory(new PropertyValueFactory<>("Name"));

		TableColumn col2 = new TableColumn<>("Description");
		col2.setMaxWidth(100);
		col2.setCellValueFactory(new PropertyValueFactory<>("Description"));

		table.getColumns().addAll(col1, col2);
		table.setTableMenuButtonVisible(true);
		col1.getTypeSelector();

		/*
		 * still to be done / the only method which is not functional at the
		 * moment
		 */
		Button cancel = new Button("Cancel");
		cancel.setFont(new Font(30));
		cancel.setOnAction(e -> {

		});
		/*
		 * i dont know how we gonna do it but for now this method can only
		 * delete with respect to name i can modify it later to delete with ID
		 * if thats what is needed
		 */

		// BorderPane bp = new BorderPane();
		// bp.setLeft(vb);
		// bp.setCenter(table);
		// table.setPrefSize(50, 10);
		// bp.setPadding(new Insets(10, 50, 50, 10));

		GridPane grigp = new GridPane();
		grigp.add(name, 0, 1);
		grigp.setVgap(15);
		grigp.add(new Label("Description:"), 0, 3);

		GridPane.setConstraints(description, 0, 4);
		grigp.getChildren().add(description);

		grigp.setAlignment(Pos.CENTER);

		grigp.add(textArea, 0, 6);
		grigp.add(brows, 1, 6);

		HBox hb = new HBox();

		hb.getChildren().addAll(savbut, cancel);
		hb.setSpacing(50);
		hb.setPadding(new Insets(30, 0, 0, 90));

		VBox vb = new VBox();
		vb.setAlignment(Pos.CENTER);
		vb.getChildren().addAll(grigp, hb);

		Scene scene = new Scene(vb, 500, 500, Color.rgb(200, 139, 128));

		primaryStage.setScene(scene);
		primaryStage.show();
	}
	/*
	 * this method helps to add new event each time one is created instead of
	 * adding the same thing more than once
	 */

	public void refresTable() {
		data.clear();

		try {
			String sql = "select * from SaveEvent ";
			pre = con.prepareStatement(sql);
			result = pre.executeQuery();
			while (result.next()) {
				data.add(new CreatEvent(result.getString("Name"), result.getString("Description")));
				table.setItems(data);

			}
			pre.close();
			result.close();
		} catch (SQLException e1) {

			e1.printStackTrace();

		}
	}

	/*
	 * Clear all fields after the add button is click instead of deleting the
	 * textfield and rewritting a new event
	 */
	private void ClearFields() {
		name.clear();
		description.clear();

		textArea.clear();

	}
	/* database connection */

	private void CheckConection() throws SQLException {

		con = Sqlconnect.DbConnector();
		if (con == null) {
			System.out.println("Not connected");
			System.exit(1);
		} else {
			System.out.println("connected");
		}

	}

}
